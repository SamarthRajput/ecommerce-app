generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ========================
// ===== ENUMS ============
// ========================
//

enum ProductStatus {
  INACTIVE
  ARCHIVED
  APPROVED
  PENDING
  REJECTED
  EXPIRED
}

enum ListingType {
  SELL
  LEASE
  RENT
}

enum ProductCondition {
  NEW
  USED
  REFURBISHED
  CUSTOM
}

enum LogisticsType {
  SELF
  INTERLINK
  BOTH
}

enum RFQStatus {
  PENDING         // Buyer submitted
  FORWARDED       // Admin reviewed and forwarded to seller
  REJECTED        // Admin rejected
  APPROVED        // Seller accepted and RFQ is confirmed
}

enum TradeStatus {
  COMPLETED
  IN_PROGRESS
}

enum ChatRoomType {
  BUYER
  SELLER
}

enum Role {
  ADMIN
  BUYER
  SELLER
}

enum ChatRoomStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

enum BusinessType {
  INDIVIDUAL
  PROPRIETORSHIP
  PARTNERSHIP
  LLP
  PRIVATE_LIMITED
  PUBLIC_LIMITED
  NGO
  GOVERNMENT_ENTITY
  OTHER
}

//
// ========================
// ===== MODELS ===========
// ========================
//

model Buyer {
  id          String     @id @default(uuid())
  email       String     @unique
  password    String
  firstName   String
  lastName    String
  phoneNumber String
  street      String
  state       String
  city        String
  zipCode     String
  country     String

  rfq         RFQ[]
  chatRooms   ChatRoom[]
  trades      Trade[]    @relation("BuyerTrades")
  reviews     Review[]
}

model Seller {
  id              String       @id @default(cuid())
  email           String       @unique
  password        String
  firstName       String
  lastName        String
  phone           String       @unique
  countryCode     String

  role            String       @default("seller")
  isEmailVerified Boolean      @default(false)
  isPhoneVerified Boolean      @default(false) // for OTP logic
  isApproved      Boolean      @default(false)
  approvalNote    String?
  slug            String?

  businessName    String
  businessType    BusinessType
  registrationNo  String?      // Company Registration Number
  taxId           String?      // GSTIN, PAN, VAT, etc.
  panOrTin        String?      // Optional PAN/TIN
  website         String?
  linkedIn        String?

  yearsInBusiness Int?         // Dropdown: e.g., 1‚Äì3 = 3
  industryTags    String[]     // e.g., ["Agriculture", "IT"]
  keyProducts     String[]     // e.g., ["Solar Panels", "Crude Oil"]

  companyBio      String?      // Description of business

  // Address
  street          String
  city            String
  state           String
  zipCode         String
  country         String

  // Compliance document uploads (stored as URL strings)
  govIdUrl        String?      // Aadhaar, Passport, etc.
  gstCertUrl      String?      // GST Certificate
  businessDocUrl  String?      // Company registration
  otherDocsUrl    String?      // Any other license or proof

  agreedToTerms   Boolean      @default(false)

  product         Product[]
  chatRooms       ChatRoom[]
  rfqForwards     RFQForward[]
  trades          Trade[]      @relation("SellerTrades")

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Product {
  id                   String         @id @default(uuid())
  slug                 String         @unique

  name                 String
  description          String
  price                Float
  currency             String?        // e.g., "USD", "INR"
  quantity             Int
  minimumOrderQuantity Int?

  listingType          ListingType    // enum: SELL / LEASE
  condition            ProductCondition
  validityPeriod       Int            // in days
  expiryDate           DateTime?
  deliveryTimeInDays   Int?

  logisticsSupport     LogisticsType? // enum: SELF / INTERLINK / BOTH

  industry             String
  category             String
  productCode          String
  model                String
  specifications       String
  countryOfSource      String
  hsnCode              String

  certifications       String[]
  licenses             String[]
  warrantyPeriod       String?

  brochureUrl          String?
  videoUrl             String?
  images               String[]

  tags                 String[]
  keywords             String[]

  status               ProductStatus  @default(PENDING)

  sellerId             String
  seller               Seller         @relation(fields: [sellerId], references: [id])

  rfqs                 RFQ[]
  trades               Trade[]
  reviews              Review[]

  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model RFQ {
  id         String     @id @default(uuid())
  productId  String
  product    Product    @relation(fields: [productId], references: [id])
  buyerId    String
  buyer      Buyer      @relation(fields: [buyerId], references: [id])
  quantity   Int
  message    String?
  status     RFQStatus
  rejectionReason     String? 
  reviewedAt  DateTime?
  trade      Trade?

  forwardedToSellers RFQForward[]
  chatRooms  ChatRoom[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model RFQForward {
  id              String   @id @default(uuid())

  rfqId           String
  rfq             RFQ      @relation(fields: [rfqId], references: [id])

  sellerId        String
  seller          Seller   @relation(fields: [sellerId], references: [id])

  isUpdatedByAdmin Boolean  @default(false)
  forwardedAt      DateTime @default(now())

  @@unique([rfqId, sellerId]) // prevent duplicate forward
}

model Trade {
  id           String     @id @default(uuid())
  rfqId        String     @unique
  rfq          RFQ        @relation(fields: [rfqId], references: [id])

  productId    String
  product      Product    @relation(fields: [productId], references: [id])

  buyerId      String
  buyer        Buyer      @relation("BuyerTrades", fields: [buyerId], references: [id])

  sellerId     String
  seller       Seller     @relation("SellerTrades", fields: [sellerId], references: [id])

  quantity     Int
  price        Float
  deliveryDate DateTime
  status       TradeStatus

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}

model Review {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])

  buyerId   String
  buyer     Buyer    @relation(fields: [buyerId], references: [id])

  rating    Int      // 1 to 5
  comment   String

  createdAt DateTime @default(now())
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      String     @default("admin")

  chatRooms ChatRoom[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ChatRoom {
  id             String        @id @default(uuid())
  rfqId          String
  rfq            RFQ           @relation(fields: [rfqId], references: [id])

  buyerId        String?       // Admin <--> Buyer
  buyer          Buyer?        @relation(fields: [buyerId], references: [id])

  sellerId       String?       // Admin <--> Seller
  seller         Seller?       @relation(fields: [sellerId], references: [id])

  adminId        String
  admin          User          @relation(fields: [adminId], references: [id])

  type           ChatRoomType

  status         ChatRoomStatus @default(ACTIVE)
  lastMessageAt  DateTime       @default(now())

  messages       ChatMessage[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([rfqId, type])
}

model ChatMessage {
  id              String        @id @default(uuid())
  chatRoomId      String
  chatRoom        ChatRoom      @relation(fields: [chatRoomId], references: [id])

  senderRole      Role
  senderId        String        // Can be admin/buyer/seller ID
  content         String

  edited          Boolean       @default(false)
  deleted         Boolean       @default(false)

  attachmentUrl   String?       // Optional file/image
  attachmentType  String?       // "image", "pdf", etc.

  replyToId       String?
  replyTo         ChatMessage?   @relation("ReplyTo", fields: [replyToId], references: [id])
  replies         ChatMessage[]  @relation("ReplyTo")

  isPinned        Boolean       @default(false)
  isStarred       Boolean       @default(false)

  read            Boolean       @default(false)
  sentAt          DateTime      @default(now())

  reactions       MessageReaction[]
}

model MessageReaction {
  id          String     @id @default(uuid())
  messageId   String
  message     ChatMessage @relation(fields: [messageId], references: [id])

  reactorId   String     // User ID who reacted
  reactorRole Role       // BUYER / SELLER / ADMIN

  emoji       String     // like "‚ù§Ô∏è", "üëç", etc.
  createdAt   DateTime   @default(now())
}