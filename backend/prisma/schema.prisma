generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Buyer {
  id          String     @id @default(uuid())
  email       String     @unique
  password    String
  firstName   String
  lastName    String
  phoneNumber String
  street      String
  state       String
  city        String
  zipCode     String
  country     String
  otp         Int?
  otpExpiry   DateTime?
  chatRooms   ChatRoom[]
  rfq         RFQ[]
  reviews     Review[]
  trades      Trade[]    @relation("BuyerTrades")
}

model Seller {
  id               String          @id @default(cuid())
  email            String          @unique
  password         String
  firstName        String
  lastName         String
  phone            String          @unique
  countryCode      String
  resetToken       String?
  resetTokenExpiry DateTime?
  role             String          @default("seller")
  isEmailVerified  Boolean         @default(false)
  isPhoneVerified  Boolean         @default(false)
  isApproved       Boolean         @default(false)
  approvalNote     String?
  slug             String?
  businessName     String
  businessType     BusinessType
  registrationNo   String?
  taxId            String?
  panOrTin         String?
  website          String?
  linkedIn         String?
  yearsInBusiness  Int?
  industryTags     String[]
  keyProducts      String[]
  companyBio       String?
  street           String
  city             String
  state            String
  zipCode          String
  country          String
  govIdUrl         String?
  gstCertUrl       String?
  businessDocUrl   String?
  otherDocsUrl     String?
  agreedToTerms    Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
  certifications   Certification[]
  chatRooms        ChatRoom[]
  product          Product[]
  rfqForwards      RFQForward[]
  trades           Trade[]         @relation("SellerTrades")

  
  industryId       String
  industry         Industry        @relation(fields: [industryId], references: [id])
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Industry {
  id        String     @id @default(uuid())
  name      String     @unique
  products  Product[]
  sellers   Seller[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Unit {
  id        String     @id @default(uuid())
  name      String     @unique  // e.g. "Kilogram", "Liter", "Meter"
  symbol    String?             // e.g. "kg", "L", "m"
  products  Product[]
  rfqs      RFQ[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Product {
  id                     String           @id @default(uuid())
  slug                   String           @unique
  name                   String
  description            String
  price                  Float
  currency               String?
  quantity               Int
  minimumOrderQuantity   Int?
  listingType            ListingType
  condition              ProductCondition
  validityPeriod         Int
  expiryDate             DateTime?
  deliveryTimeInDays     Int?
  logisticsSupport       LogisticsType?
  
  industryId             String
  categoryId             String
  unitId                 String

  model                  String?
  specifications         String
  countryOfSource        String
  hsnCode                String
  warrantyPeriod         String?
  brochureUrl            String?
  videoUrl               String?
  images                 String[]
  tags                   String[]
  keywords               String[]
  licenses               String[]

  status                 ProductStatus    @default(PENDING)
  rejectionReason        String?
  sellerId               String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @default(now())

  // Relations
  industry               Industry         @relation(fields: [industryId], references: [id])
  category               Category         @relation(fields: [categoryId], references: [id])
  unit                   Unit             @relation(fields: [unitId], references: [id])
  seller                 Seller           @relation(fields: [sellerId], references: [id])
  certifications         String[]
  certificationsRelation Certification[]
  rfqs                   RFQ[]
  reviews                Review[]
  trades                 Trade[]
  chatRooms              ChatRoom[]
}

model RFQ {
  id                        String       @id @default(uuid())
  productId                 String
  buyerId                   String
  quantity                  Int
  unitId                    String       // Now linked to Unit table
  deliveryDate              DateTime?
  budget                    Float?
  currency                  String?
  paymentTerms              String?
  
  advancePaymentPercentage  Float?
  cashAgainstDocumentsPercentage Float?
  documentsAgainstPaymentPercentage Float?
  documentsAgainstAcceptancePercentage Float?

  paymentMethod             PaymentMethod?
  letterOfCreditDescription String?
  specialRequirements       String?
  requestChangeInDeliveryTerms Boolean?
  servicesRequired          String[]
  additionalNotes           String?
  message                   String?
  status                    RFQStatus
  rejectionReason           String?
  reviewedAt                DateTime?
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @default(now())

  // Relations
  unit                      Unit         @relation(fields: [unitId], references: [id])
  chatRooms                 ChatRoom[]
  buyer                     Buyer        @relation(fields: [buyerId], references: [id])
  product                   Product      @relation(fields: [productId], references: [id])
  forwardedToSellers        RFQForward[]
  trade                     Trade?
}

enum PaymentMethod {
  TELEGRAPHIC_TRANSFER      // TT
  LETTER_OF_CREDIT          // LC
}

model RFQForward {
  id               String   @id @default(uuid())
  rfqId            String
  sellerId         String
  isUpdatedByAdmin Boolean  @default(false)
  forwardedAt      DateTime @default(now())
  rfq              RFQ      @relation(fields: [rfqId], references: [id])
  seller           Seller   @relation(fields: [sellerId], references: [id])

  @@unique([rfqId, sellerId])
}

model Trade {
  id           String      @id @default(uuid())
  rfqId        String      @unique
  productId    String
  buyerId      String
  sellerId     String
  quantity     Int
  price        Float
  deliveryDate DateTime
  status       TradeStatus
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  buyer        Buyer       @relation("BuyerTrades", fields: [buyerId], references: [id])
  product      Product     @relation(fields: [productId], references: [id])
  rfq          RFQ         @relation(fields: [rfqId], references: [id])
  seller       Seller      @relation("SellerTrades", fields: [sellerId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  buyerId   String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  buyer     Buyer    @relation(fields: [buyerId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Admin {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(ADMIN)
  adminRole AdminRole  @default(ADMIN)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  chatRooms ChatRoom[]
}

model ChatRoom {
  id            String         @id @default(uuid())
  rfqId         String?
  productId     String?
  buyerId       String?
  sellerId      String?
  adminId       String
  type          ChatRoomType
  status        ChatRoomStatus @default(ACTIVE)
  lastMessageAt DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  messages      ChatMessage[]
  admin         Admin          @relation(fields: [adminId], references: [id])
  buyer         Buyer?         @relation(fields: [buyerId], references: [id])
  rfq           RFQ?            @relation(fields: [rfqId], references: [id])
  product       Product?        @relation(fields: [productId], references: [id])
  seller        Seller?        @relation(fields: [sellerId], references: [id])

  @@unique([rfqId, type])
  @@unique([productId, sellerId, type])
}

model ChatMessage {
  id             String            @id @default(uuid())
  chatRoomId     String
  senderRole     Role
  senderId       String
  content        String
  edited         Boolean           @default(false)
  deleted        Boolean           @default(false)
  attachmentUrl  String?
  attachmentType String?
  replyToId      String?
  isPinned       Boolean           @default(false)
  isStarred      Boolean           @default(false)
  read           Boolean           @default(false)
  sentAt         DateTime          @default(now())
  chatRoom       ChatRoom          @relation(fields: [chatRoomId], references: [id])
  replyTo        ChatMessage?      @relation("ReplyTo", fields: [replyToId], references: [id])
  replies        ChatMessage[]     @relation("ReplyTo")
  reactions      MessageReaction[]
}

model MessageReaction {
  id          String      @id @default(uuid())
  messageId   String
  reactorId   String
  reactorRole Role
  emoji       String
  createdAt   DateTime    @default(now())
  message     ChatMessage @relation(fields: [messageId], references: [id])
}

model Certification {
  id             String              @id @default(uuid())
  sellerId       String
  productId      String
  status         CertificationStatus @default(PENDING)
  paymentId      String?
  amount         Float
  issuedAt       DateTime?
  certificateUrl String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @default(now())
  product        Product             @relation(fields: [productId], references: [id])
  seller         Seller              @relation(fields: [sellerId], references: [id])

  @@unique([sellerId, productId])
}

enum ProductStatus {
  INACTIVE
  ARCHIVED
  APPROVED
  PENDING
  REJECTED
  EXPIRED
  DRAFT
}

enum ListingType {
  SELL
  LEASE
}

enum ProductCondition {
  NEW
  USED
  REFURBISHED
  CUSTOM
}

enum LogisticsType {
  SELLER
  INTERLINK
  BUYER
}

enum TradeStatus {
  COMPLETED
  IN_PROGRESS
}

enum ChatRoomType {
  BUYER
  SELLER
}

enum Role {
  ADMIN
  BUYER
  SELLER
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  INSPECTOR
}

enum ChatRoomStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

enum BusinessType {
  INDIVIDUAL
  PROPRIETORSHIP
  PARTNERSHIP
  LLP
  PRIVATE_LIMITED
  PUBLIC_LIMITED
  NGO
  GOVERNMENT_ENTITY
  OTHER
}

enum CertificationStatus {
  PENDING
  PAID
  ISSUED
  REJECTED
}

enum RFQStatus {
  PENDING
  APPROVED
  FORWARDED
  REJECTED
}
