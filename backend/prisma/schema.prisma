generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Buyer Schema
model Buyer {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  firstName String  
  lastName  String  
  phoneNumber   String
  street     String
  state      String
  city       String
  zipCode    String 
  country    String 
  rfq        RFQ[]
  trades     Trade[]  @relation("BuyerTrades")
  reviews    Review[] 
}

// Seller Schema
model Seller {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String
  businessName String
  businessType String
  phone     String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  taxId     String
  product   Product[]
  trades    Trade[]   @relation("SellerTrades")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductStatus { 
  ACTIVE
  INACTIVE
  ARCHIVED
  APPROVED
  PENDING
  REJECTED
}

// Listing = Product, therefore the product model is for listing model 
model Product {
  id            String     @id @default(uuid())
  name          String
  description     String
  price           Float
  quantity        Int
  listingType     String     // e.g., 'SELL'
  condition       String     // e.g., 'NEW'
  validityPeriod  Int        // days till expiration
  industry        String
  category        String
  productCode     String
  model           String
  specifications  String
  countryOfSource String
  hsnCode         String
  images          String[]   // Array of image URLs or paths

  status          ProductStatus  @default(ACTIVE)

  sellerId        String
  seller          Seller    @relation(fields: [sellerId], references: [id])

  rfqs            RFQ[]
  trades          Trade[]

  reviews         Review[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}


enum RFQStatus {
  PENDING
  COMPLETED
}

model RFQ {
  id            String    @unique @default(uuid())
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  buyerId       String
  buyer         Buyer     @relation(fields: [buyerId], references: [id])
  quantity      Int
  message       String?
  status        RFQStatus   
  trade         Trade?
}

enum TradeStatus {
  COMPLETED
  IN_PROGRESS
}

model Trade {
  id        String    @unique @default(uuid())
  rfqId     String    @unique
  rfq       RFQ       @relation(fields: [rfqId], references: [id])

  productId String
  product   Product   @relation(fields: [productId], references: [id])

  buyerId   String
  buyer     Buyer     @relation("BuyerTrades", fields: [buyerId], references: [id]) 

  sellerId  String  
  seller    Seller    @relation("SellerTrades", fields: [sellerId], references: [id])

  quantity  Int
  price     Float
  deliveryDate  DateTime
  status     TradeStatus 

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
}

// Model User for admin
model User {
  id    String @id @default(uuid())
  name  String
  email String @unique
  role  String @default("admin")
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Review of the product 
model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  buyer     Buyer    @relation(fields: [buyerId], references: [id])
  buyerId   String
  rating    Int      // 1 to 5
  comment   String
  createdAt DateTime @default(now())
}
